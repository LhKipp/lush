syntax_elements = [
  # [kind_name                  , token_text , regex                                 , is_token , is_node]

   # keywords
   [ "LetKeyword"               , "let"      , ""                                    , true     , false]   ,
   [ "FnKeyword"                , "fn"       , ""                                    , true     , false]   ,
   [ "ElifKeyword"              , "elif"     , ""                                    , true     , false]   ,
   [ "ElseKeyword"              , "else"     , ""                                    , true     , false]   ,
   [ "IfKeyword"                , "if"       , ""                                    , true     , false]   ,
   [ "WhileKeyword"             , "while"    , ""                                    , true     , false]   ,
   [ "EndKeyword"               , "end"      , ""                                    , true     , false]   ,

    # punctuation
    ["LeftParenthesis"          , '('        , ""                                    , true     , false]   ,
    ["RightParenthesis"         , ')'        , ""                                    , true     , false]   ,
    ["LeftCurlyBrackets"        , '{'        , ""                                    , true     , false]   ,
    ["RightCurlyBrackets"       , '}'        , ""                                    , true     , false]   ,
    ["LeftRectangularBrackets"  , '['        , ""                                    , true     , false]   ,
    ["RightRectangularBrackets" , ']'        , ""                                    , true     , false]   ,
    ["PlusSign"                 , '+'        , ""                                    , true     , false]   ,
    ["MinusSign"                , '-'        , ""                                    , true     , false]   ,
    ["MultSign"                 , '*'        , ""                                    , true     , false]   ,
    ["DivSign"                  , '/'        , ""                                    , true     , false]   ,
    ["LessThanSign"             , '<'        , ""                                    , true     , false]   ,
    ["LessOrEqualSign"          , '<='       , ""                                    , true     , false]   ,
    ["EqualitySign"             , '=='       , ""                                    , true     , false]   ,
    ["InequalitySign"           , '!='       , ""                                    , true     , false]   ,
    ["BiggerThanSign"           , '>'        , ""                                    , true     , false]   ,
    ["BiggerOrEqualSign"        , '>='       , ""                                    , true     , false]   ,
    ["AssignSign"               , '='        , ""                                    , true     , false]   ,
    ["RightStream"              , '>>'       , ""                                    , true     , false]   ,
    ["Pipe"                     , '|'        , ""                                    , true     , false]   ,
    ["Dollar"                   , '$'        , ""                                    , true     , false]   ,
    ["Point"                    , '.'        , ""                                    , true     , false]   ,
    ["DoubleQuote"              , '\"'       , ""                                    , true     , false]   ,
    ["SingleQuote"              , "'"        , ""                                    , true     , false]   ,

    # various tokens
    ["Whitespace"               , ""         , "[ ]+"                                , true     , false]   ,
    ["Comment"                  , ""         , "#.*\\n"                              , true     , false]   ,
    ["Newline"                  , ""         , "\\n"                                 , true     , false]   ,
    ["Number"                   , ""         , "[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)" , true     , false]   ,

    ["Error"                    , ""         , ""                                    , true     , false]   ,
    ["BareWord"                 , ""         , "[a-zA-Z]+"                           , true     , false]   ,
    #meta rules
    ["Eof"                      , ""         , ""                                    , false    , true]    ,
    ["SourceFile"               , ""         , ""                                    , false    , true]    ,
    ["Tombstone"                , ""         , ""                                    , false    , true]    ,
    ["LetStmt"                  , ""         , ""                                    , false    , true]    ,
    ["FnStmt"                   , ""         , ""                                    , false    , true]    ,
    ["CmdStmt"                  , ""         , ""                                    , false    , true]    ,
    ["Signature"                , ""         , ""                                    , false    , true]    ,
    ["MathExpr"                 , ""         , ""                                    , false    , true]    ,
    ["StringExpr"       , ""         , ""                                    , false    , true]    ,
    ["ValuePathExpr"                , ""         , ""                                    , false    , true]    ,
    ["ArrayExpr"                    , ""         , ""                                    , false    , true]    ,
    ["TableExpr"                    , ""         , ""                                    , false    , true]    ,
]


# Elements that can be one of the above (represented as enums)
generic_elements = [
    # Element name, can represent
    # An Expression is a syntax_element which directly represents a Value (see value crate)
    ["Expression", ["BareWord", "Number", "MathExpr", "StringExpr", "ValuePathExpr", "ArrayExpr", "TableExpr"]]
]
