Math as func works
===
use std:iter
[1 2 3] | map $arg + 1
---
{
  "Ok": {
    "Array": [
      {
        "Number": 2.0
      },
      {
        "Number": 3.0
      },
      {
        "Number": 4.0
      }
    ]
  }
}
...
Math as func works 2
===
fn take_pred(pred: fn(arg1 arg2 ret: bool))
    ret pred 1 2
end
take_pred $arg1 < $arg2
---
{
  "Ok": {
    "Bool": true
  }
}
...
Math as func works 3
===
fn take_generator(generator: fn(ret: num))
    ret generator
end
take_generator 1 + 1
---
{
  "Ok": {
    "Number": 2.0
  }
}
...
Math as func with table
===
use std:iter

struct Person{
    name: str
    salary: num
}
let persons: [Person] = [(Person) ["she" 100] ["he" 200] ["them" 300]]
$persons | filter $arg.salary > 200
---
{
  "Ok": {
    "Array": [
      {
        "Strct": [
          "Person",
          [
            [
              "name",
              {
                "String": "them"
              }
            ],
            [
              "salary",
              {
                "Number": 300.0
              }
            ]
          ]
        ]
      }
    ]
  }
}
...
Math as func with table 2
===
use std:iter

struct Person{
    name: str
    salary: num
}
let persons: [Person] = [(Person) ["she" 100] ["he" 200] ["them" 300]]
$persons | filter $arg.salary > 200 | select salary | map $arg.salary + 1
---
{
  "Ok": {
    "Array": [
      {
        "Number": 301.0
      }
    ]
  }
}
...
