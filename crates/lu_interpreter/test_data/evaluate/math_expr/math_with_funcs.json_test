Command stmt does not eat operators
===
fn ret_num
    ret 3
end
ret_num + 41 == (ret_num) + 41
---
{
  "Ok": {
    "Bool": true
  }
}
...
Command stmt eats math expr
===
fn passthrough(arg: num)
    ret $arg * 3
end
passthrough 1 + 5
---
{
  "Ok": {
    "Number": 18.0
  }
}
...
Pipes break math expr
===
fn passthrough(in: num arg: num)
    ret $in * $arg
end
3 | passthrough 1 + 5 | passthrough 2
---
{
  "Ok": {
    "Number": 36.0
  }
}
...
Parentherized commands are evaluated and passed as args
===
fn take_nums(arg1: num arg2: num)
    ret $arg1 + $arg2
end
fn ret_num
    ret 1
end
take_nums (ret_num) (ret_num)
---
{
  "Ok": {
    "Number": 2.0
  }
}
...
Not parentherized commands are treated as barewords
===
fn take_str(arg1: str)
    ret $arg1
end
fn ret_str
    ret "hi"
end
take_str ret_str
---
{
  "Ok": {
    "BareWord": "ret_str"
  }
}
...

