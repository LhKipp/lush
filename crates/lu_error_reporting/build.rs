use itertools::Itertools;
use std::{error::Error, path::PathBuf};
use walkdir::WalkDir;

#[macro_use]
extern crate manifest_dir_macros;

fn main() -> Result<(), Box<dyn Error>> {
    // We need to build a table from file!() => include_str!(file!())
    let project_root = fs_err::canonicalize(path!("../..")).unwrap();
    let sources = fs_err::canonicalize(path!("../../src")).unwrap();
    let crates = fs_err::canonicalize(path!("../../crates")).unwrap();
    let f_out = path!("src/lu_source_files.rs");

    let all_path_files_pairs = WalkDir::new(&sources)
        .into_iter()
        .chain(WalkDir::new(&crates).into_iter())
        .filter_map(|f_entry| {
            let f_path = f_entry.unwrap().path().to_path_buf();
            if !f_path.to_string_lossy().ends_with(".rs")
                || f_path.ends_with("build.rs")
                || f_path == PathBuf::from(f_out)
            {
                return None;
            }

            println!("cargo:rerun-if-changed={}", f_path.display());
            let f_content = std::fs::read_to_string(&f_path).unwrap();
            if !f_content.contains("lu_source_code_item!") {
                return None;
            }

            let f_path = f_path
                .strip_prefix(project_root.clone())
                .unwrap()
                .to_owned();

            let f_content_quoted = format!("r#####\"{}\"#####", f_content);
            Some(format!("(\"{}\",{})", f_path.display(), f_content_quoted))
        })
        .join("\n,");

    let result_f_content = format!(
        r#"
        // DO NOT EDIT THIS FILE. IT IS AUTOGENERATED
        pub(crate) const FILE_TO_STR: &[(&'static str, &'static str)] = &[
        {}
        ];
    "#,
        all_path_files_pairs
    );

    std::fs::write(f_out, result_f_content).unwrap();
    Ok(())
}
