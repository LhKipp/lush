(
    syntax_elements: [
        (
            name: "LetKeyword",
            struct_name: "LetKeywordToken",
            token_text: "let",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [0]
        (
            name: "FnKeyword",
            struct_name: "FnKeywordToken",
            token_text: "fn",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [1]
        (
            name: "ForKeyword",
            struct_name: "ForKeywordToken",
            token_text: "for",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [2]
        (
            name: "ElifKeyword",
            struct_name: "ElifKeywordToken",
            token_text: "elif",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [3]
        (
            name: "ElseKeyword",
            struct_name: "ElseKeywordToken",
            token_text: "else",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [4]
        (
            name: "IfKeyword",
            struct_name: "IfKeywordToken",
            token_text: "if",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [5]
        (
            name: "WhileKeyword",
            struct_name: "WhileKeywordToken",
            token_text: "while",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [6]
        (
            name: "EndKeyword",
            struct_name: "EndKeywordToken",
            token_text: "end",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [7]
        (
            name: "BeginKeyword",
            struct_name: "BeginKeywordToken",
            token_text: "begin",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [8]
        (
            name: "InKeyword",
            struct_name: "InKeywordToken",
            token_text: "in",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [9]
        (
            name: "LeftParenthesis",
            struct_name: "LeftParenthesisToken",
            token_text: "(",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [10]
        (
            name: "RightParenthesis",
            struct_name: "RightParenthesisToken",
            token_text: ")",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [11]
        (
            name: "LeftCurlyBrackets",
            struct_name: "LeftCurlyBracketsToken",
            token_text: "{",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [12]
        (
            name: "RightCurlyBrackets",
            struct_name: "RightCurlyBracketsToken",
            token_text: "}",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [13]
        (
            name: "LeftRectangularBrackets",
            struct_name: "LeftRectangularBracketsToken",
            token_text: "[",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [14]
        (
            name: "RightRectangularBrackets",
            struct_name: "RightRectangularBracketsToken",
            token_text: "]",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [15]
        (
            name: "PlusSign",
            struct_name: "PlusSignToken",
            token_text: "+",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [16]
        (
            name: "MinusSign",
            struct_name: "MinusSignToken",
            token_text: "-",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [17]
        (
            name: "MultSign",
            struct_name: "MultSignToken",
            token_text: "*",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [18]
        (
            name: "DivSign",
            struct_name: "DivSignToken",
            token_text: "/",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [19]
        (
            name: "LessThanSign",
            struct_name: "LessThanSignToken",
            token_text: "<",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [20]
        (
            name: "LessOrEqualSign",
            struct_name: "LessOrEqualSignToken",
            token_text: "<=",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [21]
        (
            name: "EqualitySign",
            struct_name: "EqualitySignToken",
            token_text: "==",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [22]
        (
            name: "InequalitySign",
            struct_name: "InequalitySignToken",
            token_text: "!=",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [23]
        (
            name: "BiggerThanSign",
            struct_name: "BiggerThanSignToken",
            token_text: ">",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [24]
        (
            name: "BiggerOrEqualSign",
            struct_name: "BiggerOrEqualSignToken",
            token_text: ">=",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [25]
        (
            name: "AssignSign",
            struct_name: "AssignSignToken",
            token_text: "=",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [26]
        (
            name: "RightStream",
            struct_name: "RightStreamToken",
            token_text: ">>",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [27]
        (
            name: "Pipe",
            struct_name: "PipeToken",
            token_text: "|",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [28]
        (
            name: "Dollar",
            struct_name: "DollarToken",
            token_text: "$",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [29]
        (
            name: "Point",
            struct_name: "PointToken",
            token_text: ".",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [30]
        (
            name: "DoubleQuote",
            struct_name: "DoubleQuoteToken",
            token_text: "\\\"",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [31]
        (
            name: "SingleQuote",
            struct_name: "SingleQuoteToken",
            token_text: "\'",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [32]
        (
            name: "Error",
            struct_name: "ErrorToken",
            token_text: "",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [33]
        (
            name: "ParserInternal",
            struct_name: "ParserInternalToken",
            token_text: "",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [34]
        (
            name: "BareWord",
            struct_name: "BareWordToken",
            token_text: "",
            regex: "[_a-zA-Z]+",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [35]
        (
            name: "Whitespace",
            struct_name: "WhitespaceToken",
            token_text: "",
            regex: "[ ]+",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [36]
        (
            name: "Comment",
            struct_name: "CommentToken",
            token_text: "",
            regex: "#.*\\n",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [37]
        (
            name: "Newline",
            struct_name: "NewlineToken",
            token_text: "",
            regex: "\\n",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [38]
        (
            name: "Number",
            struct_name: "NumberToken",
            token_text: "",
            regex: "[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [39]
        (
            name: "VarDeclName",
            struct_name: "VarDeclNameToken",
            token_text: "",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [40]
        (
            name: "Eof",
            struct_name: "EofNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [41]
        (
            name: "SourceFile",
            struct_name: "SourceFileNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [42]
        (
            name: "Tombstone",
            struct_name: "TombstoneNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [43]
        (
            name: "LetStmt",
            struct_name: "LetStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [44]
        (
            name: "FnStmt",
            struct_name: "FnStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [45]
        (
            name: "IfStmt",
            struct_name: "IfStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [46]
        (
            name: "IfBlock",
            struct_name: "IfBlockNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [47]
        (
            name: "ElifBlock",
            struct_name: "ElifBlockNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [48]
        (
            name: "ElseBlock",
            struct_name: "ElseBlockNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [49]
        (
            name: "ForStmt",
            struct_name: "ForStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [50]
        (
            name: "CmdStmt",
            struct_name: "CmdStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [51]
        (
            name: "BlockStmt",
            struct_name: "BlockStmtNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [52]
        (
            name: "Signature",
            struct_name: "SignatureNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [53]
        (
            name: "MathExpr",
            struct_name: "MathExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: false,
        ),// [54]
        (
            name: "StringExpr",
            struct_name: "StringExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [55]
        (
            name: "NumberExpr",
            struct_name: "NumberExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [56]
        (
            name: "StringContent",
            struct_name: "StringContentToken",
            token_text: "",
            regex: "",
            is_token: true,
            is_node: false,
            has_rule: false,
        ),// [57]
        (
            name: "ValuePathExpr",
            struct_name: "ValuePathExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [58]
        (
            name: "ArrayExpr",
            struct_name: "ArrayExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),// [59]
        (
            name: "TableExpr",
            struct_name: "TableExprNode",
            token_text: "",
            regex: "",
            is_token: false,
            is_node: true,
            has_rule: true,
        ),
    ],
    generic_elements: [
        (
            name: "ValueExpr",
            enum_name: "ValueExprNode",
            represents_element_names: [
                "BareWord",// [0]
                "NumberExpr",// [1]
                "MathExpr",// [2]
                "StringExpr",// [3]
                "ValuePathExpr",// [4]
                "ArrayExpr",// [5]
                "TableExpr",
            ],
            represents: [
                (
                    name: "BareWord",
                    struct_name: "BareWordToken",
                    token_text: "",
                    regex: "[_a-zA-Z]+",
                    is_token: true,
                    is_node: false,
                    has_rule: false,
                ),// [0]
                (
                    name: "NumberExpr",
                    struct_name: "NumberExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [1]
                (
                    name: "MathExpr",
                    struct_name: "MathExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: false,
                ),// [2]
                (
                    name: "StringExpr",
                    struct_name: "StringExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [3]
                (
                    name: "ValuePathExpr",
                    struct_name: "ValuePathExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [4]
                (
                    name: "ArrayExpr",
                    struct_name: "ArrayExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [5]
                (
                    name: "TableExpr",
                    struct_name: "TableExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),
            ],
            impl_trait: "AstElement",
            has_rule: true,
        ),// [0]
        (
            name: "Statement",
            enum_name: "StatementNode",
            represents_element_names: [
                "ForStmt",// [0]
                "LetStmt",// [1]
                "FnStmt",// [2]
                "IfStmt",// [3]
                "CmdStmt",
            ],
            represents: [
                (
                    name: "ForStmt",
                    struct_name: "ForStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [0]
                (
                    name: "LetStmt",
                    struct_name: "LetStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [1]
                (
                    name: "FnStmt",
                    struct_name: "FnStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [2]
                (
                    name: "IfStmt",
                    struct_name: "IfStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [3]
                (
                    name: "CmdStmt",
                    struct_name: "CmdStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),
            ],
            impl_trait: "AstNode",
            has_rule: true,
        ),// [1]
        (
            name: "Condition",
            enum_name: "ConditionNode",
            represents_element_names: [
                "CmdStmt",// [0]
                "ValueExpr",
            ],
            represents: [
                (
                    name: "CmdStmt",
                    struct_name: "CmdStmtNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),// [0]
                (
                    name: "ValueExpr",
                    struct_name: "ValueExprNode",
                    token_text: "",
                    regex: "",
                    is_token: false,
                    is_node: true,
                    has_rule: true,
                ),
            ],
            impl_trait: "AstNode",
            has_rule: true,
        ),
    ],
)