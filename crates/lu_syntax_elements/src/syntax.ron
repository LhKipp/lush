Config(
    syntax_elements: [
    // === KEYWORDS ===
    ( name: "ImpureKeyword"              , token_text: "impure"                         , is_token: true   , ) ,
    ( name: "StrctKeyword"               , token_text: "struct"                         , is_token: true   , ) ,
    ( name: "ReqKeyword"                 , token_text: "req"                            , is_token: true   , ) ,
    ( name: "UseKeyword"                 , token_text: "use"                            , is_token: true   , ) ,
    ( name: "LetKeyword"                 , token_text: "let"                            , is_token: true   , ) ,
    ( name: "FnKeyword"                  , token_text: "fn"                             , is_token: true   , ) ,
    ( name: "ForKeyword"                 , token_text: "for"                            , is_token: true   , ) ,
    ( name: "ElifKeyword"                , token_text: "elif"                           , is_token: true   , ) ,
    ( name: "ElseKeyword"                , token_text: "else"                           , is_token: true   , ) ,
    ( name: "IfKeyword"                  , token_text: "if"                             , is_token: true   , ) ,
    ( name: "WhileKeyword"               , token_text: "while"                          , is_token: true   , ) ,
    ( name: "EndKeyword"                 , token_text: "end"                            , is_token: true   , ) ,
    ( name: "BeginKeyword"               , token_text: "begin"                          , is_token: true   , ) ,
    ( name: "InKeyword"                  , token_text: "in"                             , is_token: true   , ) ,
    ( name: "AnyKeyword"                 , token_text: "any"                            , is_token: true   , ) ,
    ( name: "NilKeyword"                 , token_text: "nil"                            , is_token: true   , ) ,
    ( name: "BoolKeyword"                , token_text: "bool"                           , is_token: true   , ) ,
    ( name: "TrueKeyword"                , token_text: "true"                           , is_token: true   , ) ,
    ( name: "FalseKeyword"               , token_text: "false"                           , is_token: true   , ) ,
    ( name: "NumberKeyword"              , token_text: "num"                            , is_token: true   , ) ,
    ( name: "StringKeyword"              , token_text: "str"                            , is_token: true   , ) ,
    ( name: "RetKeyword"              , token_text: "ret"                            , is_token: true   , ) ,

    // === TYPES ===
    ( name: "GenericType"                , regex: "[TU][0-9]?", priority: Some(1000) /* To beat StrctName */ , is_token: true   , ) ,
    ( name: "ArrayType"                  , is_node: true                                , has_rule: true ) ,
    ( name: "FnType"                     , is_node: true                                , has_rule: true ) ,
    // === MODIFIER ===
    ( name: "OptModifier"                , is_token: true                               , )                ,
    // === PUNCTUATION ===
    ( name: "LeftParenthesis"            , token_text: "("                              , is_token: true   , ) ,
    ( name: "RightParenthesis"           , token_text: ")"                              , is_token: true   , ) ,
    ( name: "LeftCurlyBrackets"          , token_text: "{"                              , is_token: true   , ) ,
    ( name: "RightCurlyBrackets"         , token_text: "}"                              , is_token: true   , ) ,
    ( name: "LeftRectangularBrackets"    , token_text: "["                              , is_token: true   , ) ,
    ( name: "RightRectangularBrackets"   , token_text: "]"                              , is_token: true   , ) ,
    ( name: "PlusSign"                   , token_text: "+"                              , is_token: true   , ) ,
    ( name: "MinusSign"                  , token_text: "-"                              , is_token: true   , ) ,
    ( name: "MultSign"                   , token_text: "*"                              , is_token: true   , ) ,
    ( name: "FilePathSep"                , token_text: "/"                              , is_token: true   , ) ,
    ( name: "DivSign"                    , token_text: "//"                              , is_token: true   , ) ,
    ( name: "LessThanSign"               , token_text: "<"                              , is_token: true   , ) ,
    ( name: "LessOrEqualSign"            , token_text: "<="                             , is_token: true   , ) ,
    ( name: "EqualitySign"               , token_text: "=="                             , is_token: true   , ) ,
    ( name: "InequalitySign"             , token_text: "!="                             , is_token: true   , ) ,
    ( name: "BiggerThanSign"             , token_text: ">"                              , is_token: true   , ) ,
    ( name: "BiggerOrEqualSign"          , token_text: ">="                             , is_token: true   , ) ,
    ( name: "RightStream"                , token_text: ">>"                             , is_token: true   , ) ,
    ( name: "DivAssignSign"              , token_text: "/="                              , is_token: true   , ) ,
    ( name: "MulAssignSign"              , token_text: "*="                              , is_token: true   , ) ,
    ( name: "AddAssignSign"              , token_text: "+="                              , is_token: true   , ) ,
    ( name: "MinAssignSign"              , token_text: "-="                              , is_token: true   , ) ,
    ( name: "AssignSign"                 , token_text: "="                              , is_token: true   , ) ,
    ( name: "Pipe"                       , token_text: "|"                              , is_token: true   , ) ,
    ( name: "Dollar"                     , token_text: "$"                              , is_token: true   , ) ,
    ( name: "QuestionMark"               , token_text: "?"                              , is_token: true   , ) ,
    ( name: "Point"                      , token_text: "."                              , is_token: true   , ) ,
    ( name: "DoublePoint"                , token_text: ":"                              , is_token: true   , ) ,
    ( name: "DoubleQuote"                , token_text: "\\\""                           , is_token: true   , ) ,
    ( name: "SingleQuote"                , token_text: "\'"                             , is_token: true   , ) ,
    // === META ===
    ( name: "Error"                      , is_token: true                               , )                ,
    ( name: "ParserInternal"             , is_token: true                               , )                ,
    ( name: "Eof"                        , is_node: true                                , )                ,
    ( name: "Tombstone"                  , is_node: true                                , )                ,
    // === TOKENS ===
    ( name: "Whitespace"                 , regex: "[ ]+"                                , is_token: true   , ) ,
    ( name: "Comment"                    , regex: "#[^\\n]*"                              , is_token: true   , ) ,
    ( name: "Newline"                    , regex: "\\n"                                 , is_token: true   , ) ,

    // Bareword and bareword like tokens
    ( name: "BareWord"                   , regex: "[_a-zA-Z]+[_a-zA-Z0-9]*"             , is_token: true   , ) ,
    ( name: "StringContent"              , is_token: true                               , )                ,
    ( name: "VarDeclName"                , is_token: true                               , )                ,
    ( name: "FnDeclName"                 , is_token: true                               , )                ,

    ( name: "ArgName"                  , is_token: true                               , )                ,
    ( name: "VarArgName"                 , token_text: "...[_a-zA-Z]+[_a-zA-Z0-9]*"     , is_token: true   , ) ,
    ( name: "LongFlag"                   , regex: "--[_a-zA-Z]+[_a-zA-Z0-9]*"           , is_token: true   , ) ,
    ( name: "ShortFlag"                  , regex: "-[_a-zA-Z]+[_a-zA-Z0-9]*"            , is_token: true   , ) ,

    ( name: "Number"                     , regex: "[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)" ,priority: Some(3) /* To beat FileName */, is_token: true   , ) ,

    ( name: "StrctName"                 , regex: "[A-Z]+[_a-zA-Z0-9]*" , is_token: true   , ),
    ( name: "StrctFieldName"            , is_token: true                               , )                ,

    ( name: "AbsFileName"                , is_node: true                                , has_rule: false   , ) ,
    ( name: "RelFileName"                , is_node: true                                , has_rule: false   , ) ,

    // === RULES ===
    ( name: "SourceFile"                 , is_node: true                                , has_rule: true   , ) ,
    ( name: "StrctStmt"                 , is_node: true                                , has_rule: false   , ) , // TODO has rule but w/e
    ( name: "RedirStmt"                 , is_node: true                                , has_rule: false   , ) , // TODO has rule but w/e
    ( name: "UseStmt"                 , is_node: true                                , has_rule: false   , ) , // TODO has rule but w/e
    ( name: "PluginUseStmt"                 , is_node: true                                , has_rule: false   , ) , // TODO has rule but w/e
    ( name: "StrctField"                , is_node: true                                , has_rule: false   , ) , // TODO has rule but not needed
    ( name: "StrctCtorExpr"                 , is_node: true                                , has_rule: false   , ) , // TODO has rule but w/e
    ( name: "StrctFieldCtorStmt"                , is_node: true                                , has_rule: false   , ) , // TODO has rule but not needed
    ( name: "LetStmt"                    , is_node: true                                , has_rule: true   , ) ,
    ( name: "FnStmt"                     , is_node: true                                , has_rule: true   , ) ,
    ( name: "RetStmt"                    , is_node: true                                , has_rule: true   , ) ,
    ( name: "IfStmt"                     , is_node: true                                , has_rule: true   , ) ,
    ( name: "IfBlock"                    , is_node: true                                , )                ,
    ( name: "ElifBlock"                  , is_node: true                                , )                ,
    ( name: "ElseBlock"                  , is_node: true                                , )                ,
    ( name: "ForStmt"                    , is_node: true                                , has_rule: true   , ) ,
    ( name: "CmdStmt"                    , is_node: true                                , has_rule: true   , ) ,
    ( name: "PipedCmdsStmt"              , is_node: true                                , has_rule: true   , ) ,
    // TODO block stmt can have rule     , but is not ctorable by {})                   ,
    ( name: "BlockStmt"                  , is_node: true                                , has_rule: false  , ) ,
    ( name: "Signature"                  , is_node: true                                , has_rule: true   , ) ,
    ( name: "FlagSignature"              , is_node: true                                , has_rule: false  , ) ,
    ( name: "ArgSignature"             , is_node: true                                , has_rule: false  , ) ,
    ( name: "LuType"                     , is_node: true                                , has_rule: true   , ) ,
    // === EXPRESSION RULES ===
    ( name: "MathExpr"                   , is_node: true                                , )                ,
    ( name: "ParentherizedExpr"          , is_node: true                                , )                ,
    ( name: "StringExpr"                 , is_node: true                                , has_rule: true   , ) ,
    ( name: "NumberExpr"                 , is_node: true                                , has_rule: true   , ) ,
    ( name: "ValuePathExpr"              , is_node: true                                , has_rule: true   , ) ,
    ( name: "ArrayExpr"                  , is_node: true                                , has_rule: true   , ) ,
    ( name: "TableExpr"                  , is_node: true                                , has_rule: true   , ) ,
    ( name: "BooleanExpr"                  , is_node: true                                , has_rule: false   , ) ,//TODO
    // === GENERIC META NODES === 
    ( name: "CmdOrValueExpr", is_generic: true, has_rule: false, represents_element_names: [
        "CmdStmt",
        "ValueExpr",
        ],),
    ( name: "ValueExpr", is_generic: true, has_rule: true, represents_element_names: [
        "BareWord",
        "NumberExpr",
        "BooleanExpr",
        "MathExpr",
        "StringExpr",
        "ValuePathExpr",
        "StrctCtorExpr",
        "ArrayExpr",
        "TableExpr",
        "CmdStmt",
        ],),
    ( name: "Statement",is_generic: true, represents_element_names: [
        "RetStmt",
        "ForStmt",
        "LetStmt",
        "FnStmt",
        "IfStmt",
        "CmdStmt",
        "PipedCmdsStmt",
        "ValueExpr",
        ],),
    (name: "Condition",is_generic: true, represents_element_names: [
        "CmdStmt",
        "ValueExpr",
        ],),
    (name: "OperatorExpr", is_generic: true,
        represents_element_names: [
            "PlusSign",
            "MinusSign",
            "MultSign",
            "DivSign",
            "LessThanSign",
            "LessOrEqualSign",
            "EqualitySign",
            "InequalitySign",
            "BiggerThanSign",
            "BiggerOrEqualSign",
            "DivAssignSign",
            "MulAssignSign",
            "AddAssignSign",
            "MinAssignSign",
            "AssignSign"   
        ],),
    (name: "LuTypeSpecifier", is_generic: true,
        represents_element_names: [
            "NumberKeyword",
            "AnyKeyword",
            "NilKeyword",
            "BoolKeyword",
            "StringKeyword",
            "GenericType",
            "BareWord",
            "StrctName",
            "ArrayType",
            "FnType",
        ],),
    (name: "CmdArg", is_generic: true,
        represents_element_names: [
            "ValueExpr",
            "ShortFlag",
            "LongFlag"
        ],),
    (name: "Flag", is_generic: true,
        represents_element_names: [
            "ShortFlag",
            "LongFlag"
        ],),
    (name: "RedirToValue", is_generic: true,
        represents_element_names: [
            "ValuePathExpr",
            "BareWord"
        ],),
    (name: "FileName", is_generic: true,
        represents_element_names: [
            "AbsFileName",
            "RelFileName"
        ],),
    (name: "FileNamePart", is_generic: true,
        represents_element_names: [
            "BareWord",
            "DivSign",
            "Point",
            "MinusSign",
            "DoublePoint",
            "Number",
        ],),
    ]
)
